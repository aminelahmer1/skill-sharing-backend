server:
  port: 8085

spring:
  datasource:
    url: jdbc:postgresql://localhost:5432/SkillSharing_Livestream
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:admin}
    driver-class-name: org.postgresql.Driver
    hikari:
      connection-timeout: 20000
      maximum-pool-size: 10
      minimum-idle: 5
      idle-timeout: 300000
      max-lifetime: 1200000
      leak-detection-threshold: 60000
  servlet:
    multipart:
      enabled: true
      max-file-size: 500MB
      max-request-size: 500MB
      resolve-lazily: false

  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:9098/realms/skill-sharing
          jwk-set-uri: http://localhost:9098/realms/skill-sharing/protocol/openid-connect/certs

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true

  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      batch-size: 16384
      linger-ms: 5
      retries: 3
    consumer:
      group-id: livestream-service
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      auto-offset-reset: earliest
    template:
      default-topic: livestream-notifications


  firebase:
    credentials:
      location: ${FIREBASE_CREDENTIALS_PATH:firebase-service-account.json}

eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_SERVER:http://localhost:8761/eureka/}
  instance:
    prefer-ip-address: true
    instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}

# Configuration LiveKit pour développement
livekit:
  url: ws://localhost:7880
  api-key: testkey
  api-secret: akQ2cFd4OEx0UDlyWmU3MnNZcTNtWGZOdEE0a1Z1MTIzCg==
  server-url: http://localhost:7885

  cors:
    allowed_origins:
      - "http://localhost:4200"
      - "ws://localhost:4200"

  rtc:
    udp_port: 7881
    port_range:
      start: 50000
      end: 50100
    ice_servers:
      - urls: "stun:stun.l.google.com:19302"
      - urls: "stun:stun1.l.google.com:19302"
      - urls: "turn:openrelay.metered.ca:443?transport=tcp"
        username: "openrelayproject"
        credential: "openrelayproject"

  turn:
    enabled: true

  tls:
    enabled: false

  room:
    max_participants: 50
    empty_timeout: 300
    max_duration: 7200
    auto_create: true

  token:
    ttl: 86400
    publisher_ttl: 172800

  recording:
    enabled: true
    storage-path: ./recordings
    max-size: 1GB
    format: mp4
# Configuration Firebase
firebase:
  credentials:
    path: ${FIREBASE_CREDENTIALS_PATH:classpath:firebase-service-account.json}
  messaging:
    enabled: ${FIREBASE_MESSAGING_ENABLED:true}

# Configuration Keycloak
keycloak:
  auth-server-url: http://localhost:9098
  realm: skill-sharing
  client-id: backend-service
  client-secret: ${KEYCLOAK_CLIENT_SECRET:ifUlRmmtEfu02d80iz06MroNHC5kVuKf}
  ssl-required: none
  public-client: false
  verify-token-audience: true


# Configuration de l'application
application:
  config:
    user-url: ${USER_SERVICE_URL:http://localhost:8081/api/v1/users}
    skill-url: ${SKILL_SERVICE_URL:http://localhost:8050/api/v1/skills}
    exchange-url: ${EXCHANGE_SERVICE_URL:http://localhost:8084/api/v1/exchanges}
    notification-url: ${NOTIFICATION_SERVICE_URL:http://localhost:8083/api/v1/notifications}
  livestream:
    allow-sessions-without-participants: true


  streaming:
    max-concurrent-streams: ${MAX_CONCURRENT_STREAMS:100}
    stream-timeout: ${STREAM_TIMEOUT:7200} # 2 heures
    reconnection-attempts: ${RECONNECTION_ATTEMPTS:3}
    quality-levels:
      - name: "low"
        width: 640
        height: 360
        bitrate: 500
      - name: "medium"
        width: 1280
        height: 720
        bitrate: 1500
      - name: "high"
        width: 1920
        height: 1080
        bitrate: 3000

  # Configuration des enregistrements
  recording:
    enabled: true
    storage-path: ./recordings
    max-size: 1GB
    directory: ${RECORDING_DIRECTORY:./recordings}
    min-duration-seconds: ${RECORDING_MIN_DURATION:5}  # ✅ Minimum 5 secondes
    max-duration-seconds: ${RECORDING_MAX_DURATION:1800} # ✅ Maximum 30 minutes
    retention-days: ${RECORDING_RETENTION:30}
    auto-cleanup: ${RECORDING_AUTO_CLEANUP:true}
    formats:
      - mp4
      - webm
    realistic-simulation: true

  # Configuration des notifications
  notifications:
    stream-start: ${NOTIFY_STREAM_START:true}
    stream-end: ${NOTIFY_STREAM_END:true}
    participant-join: ${NOTIFY_PARTICIPANT_JOIN:false}
    participant-leave: ${NOTIFY_PARTICIPANT_LEAVE:false}
    batch-size: ${NOTIFICATION_BATCH_SIZE:10}

# Configuration du logging
logging:
  level:
    root: INFO
    org.springframework: INFO
    org.springframework.kafka: DEBUG
    org.springframework.security: DEBUG
    com.example.servicelivestream: DEBUG
    io.livekit: DEBUG
  file:
    name: logs/service-livestream.log
    max-size: 10MB
    max-history: 30
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# Configuration de la gestion des erreurs
resilience4j:
  retry:
    instances:
      livekit-api:
        maxAttempts: 3
        waitDuration: 1000ms
        retryExceptions:
          - java.net.ConnectException
          - java.net.SocketTimeoutException
  circuit-breaker:
    instances:
      livekit-service:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        failureRateThreshold: 50
        waitDurationInOpenState: 30s

# Configuration des métriques
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true
